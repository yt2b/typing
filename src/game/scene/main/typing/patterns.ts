const singlePatterns: Record<string, string[]> = {
  あ: ['a'],
  い: ['i', 'yi'],
  う: ['u', 'wu'],
  え: ['e'],
  お: ['o'],
  か: ['ka', 'ca'],
  き: ['ki'],
  く: ['ku', 'cu'],
  け: ['ke'],
  こ: ['ko', 'co'],
  さ: ['sa'],
  し: ['si', 'shi', 'ci'],
  す: ['su'],
  せ: ['se', 'ce'],
  そ: ['so'],
  た: ['ta'],
  ち: ['ti', 'chi'],
  つ: ['tu', 'tsu'],
  て: ['te'],
  と: ['to'],
  な: ['na'],
  に: ['ni'],
  ぬ: ['nu'],
  ね: ['ne'],
  の: ['no'],
  は: ['ha'],
  ひ: ['hi'],
  ふ: ['hu', 'fu'],
  へ: ['he'],
  ほ: ['ho'],
  ま: ['ma'],
  み: ['mi'],
  む: ['mu'],
  め: ['me'],
  も: ['mo'],
  や: ['ya'],
  ゆ: ['yu'],
  よ: ['yo'],
  ら: ['ra'],
  り: ['ri'],
  る: ['ru'],
  れ: ['re'],
  ろ: ['ro'],
  わ: ['wa'],
  を: ['wo'],
  ん: ['nn', 'xn'],
  ゔ: ['vu'],
  が: ['ga'],
  ぎ: ['gi'],
  ぐ: ['gu'],
  げ: ['ge'],
  ご: ['go'],
  ざ: ['za'],
  じ: ['zi', 'ji'],
  ず: ['zu'],
  ぜ: ['ze'],
  ぞ: ['zo'],
  だ: ['da'],
  ぢ: ['di'],
  づ: ['du'],
  で: ['de'],
  ど: ['do'],
  ば: ['ba'],
  び: ['bi'],
  ぶ: ['bu'],
  べ: ['be'],
  ぼ: ['bo'],
  ぱ: ['pa'],
  ぴ: ['pi'],
  ぷ: ['pu'],
  ぺ: ['pe'],
  ぽ: ['po'],
  ぁ: ['la', 'xa'],
  ぃ: ['li', 'lyi', 'xi'],
  ぅ: ['lu', 'xu'],
  ぇ: ['le', 'lye', 'xo'],
  ぉ: ['lo', 'xo'],
  ゃ: ['lya', 'xya'],
  ゅ: ['lyu', 'xyu'],
  ょ: ['lyo', 'xyo'],
  っ: ['ltu', 'xtu', 'ltsu', 'xtsu'],
  ー: ['-'],
  a: ['a'],
  b: ['b'],
  c: ['c'],
  d: ['d'],
  e: ['e'],
  f: ['f'],
  g: ['g'],
  h: ['h'],
  i: ['i'],
  j: ['j'],
  k: ['k'],
  l: ['l'],
  m: ['m'],
  n: ['n'],
  o: ['o'],
  p: ['p'],
  q: ['q'],
  r: ['r'],
  s: ['s'],
  t: ['t'],
  u: ['u'],
  v: ['v'],
  w: ['w'],
  x: ['x'],
  y: ['y'],
  z: ['z'],
  '0': ['0'],
  '1': ['1'],
  '2': ['2'],
  '3': ['3'],
  '4': ['4'],
  '5': ['5'],
  '6': ['6'],
  '7': ['7'],
  '8': ['8'],
  '9': ['9'],
  '!': ['!'],
  '?': ['?'],
  ' ': [' '],
  '[': ['['],
  ']': [']'],
  ',': [','],
  '.': ['.'],
};

const tmpMultiPatterns: Record<string, string[]> = {
  いぇ: ['ye'],
  きゃ: ['kya'],
  きぃ: ['kyi'],
  きゅ: ['kyu'],
  きぇ: ['kye'],
  きょ: ['kyo'],
  くぁ: ['qa', 'kwa'],
  くぃ: ['qi', 'kwi'],
  くぇ: ['qe', 'kwe'],
  くぉ: ['qo', 'kwo'],
  しゃ: ['sya', 'sha'],
  しぃ: ['syi', 'shi'],
  しゅ: ['syu', 'shu'],
  しぇ: ['sye', 'she'],
  しょ: ['syo', 'sho'],
  ちゃ: ['tya', 'cya', 'cha'],
  ちぃ: ['tyi', 'cyi'],
  ちゅ: ['tyu', 'cyu', 'chu'],
  ちぇ: ['tye', 'cye', 'che'],
  ちょ: ['tyo', 'cyo', 'cho'],
  つぁ: ['tsa'],
  つぃ: ['tsi'],
  つぇ: ['tse'],
  つぉ: ['tso'],
  てぃ: ['thi'],
  とぅ: ['twu'],
  にゃ: ['nya'],
  にぃ: ['nyi'],
  にゅ: ['nyu'],
  にぇ: ['nye'],
  にょ: ['nyo'],
  ひゃ: ['hya'],
  ひぃ: ['hyi'],
  ひゅ: ['hyu'],
  ひぇ: ['hye'],
  ひょ: ['hyo'],
  みゃ: ['mya'],
  みぃ: ['myi'],
  みゅ: ['myu'],
  みぇ: ['mye'],
  みょ: ['myo'],
  りゃ: ['rya'],
  りぃ: ['ryi'],
  りゅ: ['ryu'],
  りぇ: ['rye'],
  りょ: ['ryo'],
  ふぁ: ['fa'],
  ふぃ: ['fi'],
  ふぇ: ['fe'],
  ふぉ: ['fo'],
  ぎゃ: ['gya'],
  ぎぃ: ['gyi'],
  ぎゅ: ['gyu'],
  ぎぇ: ['gye'],
  ぎょ: ['gyo'],
  ぐぁ: ['gwa'],
  じゃ: ['ja', 'zya'],
  じぃ: ['zyi'],
  じゅ: ['ju', 'zyu'],
  じぇ: ['je', 'zye'],
  じょ: ['jo', 'zyo'],
  ぢゃ: ['dya'],
  ぢぃ: ['dyi'],
  ぢゅ: ['dyu'],
  ぢぇ: ['dye'],
  ぢょ: ['dyo'],
  でぃ: ['dhi'],
  でゅ: ['dhu'],
  どぅ: ['dwu'],
  びゃ: ['bya'],
  びぃ: ['byi'],
  びゅ: ['byu'],
  びぇ: ['bye'],
  びょ: ['byo'],
  ぴゃ: ['pya'],
  ぴぃ: ['pyi'],
  ぴゅ: ['pyu'],
  ぴぇ: ['pye'],
  ぴょ: ['pyo'],
  うぁ: ['wha'],
  うぃ: ['wi', 'whi'],
  うぇ: ['we', 'whe'],
  うぉ: ['who'],
  ゔぁ: ['va'],
  ゔぃ: ['vi'],
  ゔぇ: ['ve'],
  ゔぉ: ['vo'],
  ゔゅ: ['vyu'],
};

/**
 * 表示文字列が2文字の場合に対応する複数文字パターンを生成する
 * @param input 入力文字列
 * @returns 生成された複数文字パターンの配列
 */
export const createMultiPattern = (input: string): string[] => {
  if (input.length != 2) {
    return [];
  }
  // 1文字目と2文字目の入力方法の積を返す
  const patterns1 = singlePatterns[input.charAt(0)];
  const patterns2 = singlePatterns[input.charAt(1)];
  return patterns1.flatMap((str1) => patterns2.map((str2) => str1 + str2));
};

/**
 * 文字の入力パターンを列挙した連想配列を生成する
 * @returns 入力パターンの連想配列
 */
export const createPatterns = (): Record<string, string[]> => {
  // 複数文字パターンにその他の入力方法を追加する
  // 例:「じゃ」に["zilya", "zixya", "jilya", "jixya"]を追加する
  const multiPatterns = Object.entries(tmpMultiPatterns).map(([key, value]) => [
    key,
    value.concat(createMultiPattern(key)),
  ]);
  // 1文字パターンと複数文字パターンを結合する
  return { ...singlePatterns, ...Object.fromEntries(multiPatterns) };
};
